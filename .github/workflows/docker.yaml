name: Docker Pusher 🐳✨

on:
  workflow_dispatch:
  schedule:
    - cron: '00 00 * * *'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull & Push Stable Images 🚀
    runs-on: ubuntu-latest

    steps:
      - name: Maximize Disk Space 📦
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: true
          remove-haskell: true
          build-mount-path: '/var/lib/docker/'

      - name: Restart Docker 🔄
        run: sudo service docker restart

      - name: Install Dependencies 🔧
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Checkout Code 🛒
        uses: actions/checkout@v4

      - name: Setup Docker Buildx 🔧
        uses: docker/setup-buildx-action@v3

      - name: Pull, Tag & Push Stable Releases 📦➡️🛳️
        run: |
          set -euo pipefail

          docker login -u "${ALIYUN_REGISTRY_USER}" -p "${ALIYUN_REGISTRY_PASSWORD}" "${ALIYUN_REGISTRY}"

          get_recent_tags() {
            repo=$1
            cutoff=$(date -u -d "15 days ago" +%Y-%m-%dT%H:%M:%SZ)
            page=1
            tags=()

            while :; do
              resp=$(curl -s "https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100&page=${page}")
              filtered=$(echo "$resp" | jq -r --arg cutoff "$cutoff" '
                .results[]
                | select(.last_updated >= $cutoff)
                | select(
                    .name
                    | test("(?i)(rc|beta|alpha|dev|test|preview|nightly|canary|edge)") | not
                  )
                | select(
                    .name
                    | test("^v?[0-9]+(\\.[0-9]+){0,2}$")
                  )
                | .name
              ')

              [ -z "$filtered" ] && break
              tags+=($filtered)
              [ "$(echo "$resp" | jq -r '.next')" = "null" ] && break
              page=$((page+1))
            done

            echo "${tags[@]}" | tr ' ' '\n' | sort -V | uniq
          }

          declare -A duplicate_images temp_map
          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue
            img=$(echo "$line" | sed -E 's/--alias=[^ ]+ //g' | awk '{print $NF}')
            img="${img%%@*}"
            imgn=$(basename "$img")
            ns=$(echo "$img" | awk -F'/' '{print (NF>=2?$(NF-1):"")}')
            if [ -n "${temp_map[$imgn]:-}" ] && [ "${temp_map[$imgn]}" != "${ns}_" ]; then
              duplicate_images["$imgn"]=true
            fi
            temp_map["$imgn"]="${ns}_"
          done < images.txt

          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue

            alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
            img=$(echo "$line" | sed -E 's/--alias=[^ ]+ //g' | awk '{print $NF}')
            repo="${img%%@*}"
            imgn=$(basename "$repo")
            ns=$(echo "$repo" | awk -F'/' '{print (NF>=2?$(NF-1):"")}')
            ns_prefix=""
            if [ -n "${duplicate_images[$imgn]:-}" ] && [ -n "$ns" ]; then
              ns_prefix="${ns}_"
            fi

            tags=$(get_recent_tags "$repo")
            if [ -z "$tags" ]; then
              echo "⚠️  No recent stable tags for ${repo}"
              continue
            fi

            echo "🧩 Found stable tags: ${tags}"

            for tag in $tags; do
              original="${repo}:${tag}"
              target_name="${imgn}:${tag}"
              [ -n "$alias" ] && target_name="${alias}:${tag}"
              new_img="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$ns_prefix$target_name"

              echo "🐳 Pulling ${original}..."
              docker pull "${original}"

              echo "🔗 Tagging as ${new_img}..."
              docker tag "${original}" "${new_img}"

              echo "📤 Pushing ${new_img}..."
              docker push "${new_img}"

              docker rmi "${original}" "${new_img}" || true
            done
          done < images.txt
