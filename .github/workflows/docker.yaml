name: Docker Pusher üê≥‚ú®

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Disk Space üì¶
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: true
          remove-haskell: true
          build-mount-path: "/var/lib/docker/"

      - name: Restart Docker üîÑ
        run: sudo service docker restart

      - name: Checkout Code üõí
        uses: actions/checkout@v4

      - name: Install Tools üîß
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq moreutils parallel

      - name: Login to Aliyun Docker üê≥
        run: docker login -u "${ALIYUN_REGISTRY_USER}" -p "${ALIYUN_REGISTRY_PASSWORD}" "${ALIYUN_REGISTRY}"

      - name: Sync Docker Images üöÄ
        run: |
          set -euo pipefail

          export ALIYUN_REGISTRY="${ALIYUN_REGISTRY}"
          export ALIYUN_NAME_SPACE="${ALIYUN_NAME_SPACE}"
          WORKDIR=$(mktemp -d)
          IMAGE_LIST="${WORKDIR}/final_image_list.txt"

          get_recent_tags() {
            local repo="$1"
            local page=1
            local tags=()
            local cutoff_ts=$(date -d '1 day ago' +%s)

            while :; do
              url="https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100&page=$page"
              result=$(curl -fsSL "$url" || break)
              [[ -z "$result" || "$result" == "null" ]] && break

              tag_lines=$(echo "$result" | jq -r '.results[] | [.name, .last_updated] | @tsv')
              has_recent=false

              while IFS=$'\t' read -r tag updated; do
                ts=$(date -d "$updated" +%s 2>/dev/null || echo 0)
                if (( ts >= cutoff_ts )); then
                  if [[ "$tag" == "latest" || "$tag" =~ ^v?[0-9]+(\.[0-9]+){0,2}([-a-zA-Z0-9]+)?$ ]]; then
                    if [[ "$tag" =~ (alpha|beta|rc|dev|test|nightly|canary|edge|amazon) && "$tag" != "latest" ]]; then
                      continue
                    fi
                    tags+=("$tag")
                    has_recent=true
                  fi
                fi
              done <<< "$tag_lines"

              [[ "$has_recent" == false ]] && break
              next=$(echo "$result" | jq -r '.next')
              [[ "$next" == "null" || -z "$next" ]] && break
              ((page++))
            done

            # ==== ‰øùÁïôÊØè‰∏™‰∏ªÁâàÊú¨ÊúÄÊñ∞ ====

            declare -A tags_by_major=()

            for t in "${tags[@]}"; do
              norm=$(echo "$t" | sed -E 's/^v//')
              if [[ "$norm" =~ ^([0-9]+)(\.[0-9]+)?(\.[0-9]+)?([-a-zA-Z0-9]+)?$ ]]; then
                major="${BASH_REMATCH[1]}"
                tags_by_major["$major"]+="$t "
              fi
            done

            declare -A final_keep=()

            for major in "${!tags_by_major[@]}"; do
              all_tags=(${tags_by_major[$major]})

              # sort -VrÔºöÁâàÊú¨Âè∑ÈôçÂ∫èÔºàÊï∞Â≠ó‰ºòÂÖàÔºåÂêéÁºÄÂ≠óÂÖ∏Â∫èÔºâ
              latest_tags=$(printf "%s\n" "${all_tags[@]}" | sort -Vr | head -n 3)

              while IFS= read -r line; do
                final_keep["$line"]=1
              done <<< "$latest_tags"

              # ‰øùÁïô‰∏ªÁâàÊú¨Âè∑ÂçïÁã¨Ê†áÁ≠æ
              final_keep["$major"]=1
            done

            # ‰øùÁïô latest Ê†áÁ≠æ
            if printf "%s\n" "${tags[@]}" | grep -q "^latest$"; then
              final_keep["latest"]=1
            fi

            printf "%s\n" "${!final_keep[@]}" | sort
          }

          generate_list() {
            local line="$1"
            alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
            image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | awk '{print $NF}')
            base="${image%%:*}"
            tag="${image##*:}"
            [[ "$base" == "$tag" ]] && tag=""

            repo="${base}"
            [[ "$repo" != */* ]] && repo="library/$repo"
            name=$(basename "$base")
            [[ -n "$alias" ]] && target_name="$alias" || target_name="$name"

            if [[ -n "$tag" ]]; then
              tags=("$tag")
            else
              tags=($(get_recent_tags "$repo"))
            fi

            for t in "${tags[@]}"; do
              src="${base}:${t}"
              target="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${target_name}:${t}"
              echo "$src $target" >> "$IMAGE_LIST"
            done
          }

          echo "üì¶ Generating image list from images.txt..."
          export -f get_recent_tags generate_list
          export ALIYUN_REGISTRY ALIYUN_NAME_SPACE IMAGE_LIST

          grep -vE '^\s*#|^\s*$' images.txt | parallel --line-buffer generate_list {}

          echo "üìù $(wc -l < "$IMAGE_LIST") images to sync:"
          cat "$IMAGE_LIST"

          sync_one() {
            local src="$1"
            local target="$2"

            echo "üê≥ Pulling $src..."
            if ! docker pull "$src"; then
              echo "‚ùå Failed to pull $src"
              return
            fi

            src_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "$src" 2>/dev/null | cut -d@ -f2)
            target_digest=$(docker manifest inspect "$target" 2>/dev/null | jq -r '.manifests[0].digest // .config.digest' 2>/dev/null || true)

            if [[ -n "$src_digest" && "$src_digest" == "$target_digest" ]]; then
              echo "‚úÖ $target is up-to-date, skipping."
              docker rmi "$src" || true
              return
            fi

            echo "üîó Tagging $src -> $target"
            docker tag "$src" "$target"

            echo "üì§ Pushing $target..."
            if ! timeout --foreground 300 docker push "$target"; then
              echo "‚ö†Ô∏è Push failed: $target"
              return
            fi

            docker rmi "$src" "$target" || true
            echo "‚úÖ Done: $src -> $target"
            echo "-------------------------------------------"
          }

          export -f sync_one
          cat "$IMAGE_LIST" | parallel -j 4 --colsep ' ' --line-buffer sync_one {1} {2}