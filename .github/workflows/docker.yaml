name: Docker Pusher 🐳✨

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天0点执行

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code 🛒
        uses: actions/checkout@v4

      - name: Install Tools 🔧
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Login to Aliyun Docker 🐳
        run: docker login -u "${ALIYUN_REGISTRY_USER}" -p "${ALIYUN_REGISTRY_PASSWORD}" "${ALIYUN_REGISTRY}"

      - name: Sync Docker Images 🚀
        run: |
          set -euo pipefail

          # 获取所有 tag（含 latest）
          get_all_valid_tags() {
            repo="$1"
            page=1
            tags=()
            echo "📥 Fetching tags for $repo ..."

            while :; do
              result=$(curl -s "https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100&page=$page")
              names=$(echo "$result" | jq -r '
                .results[]?.name
                | select(
                    test("(?i)(rc|alpha|beta|dev|test|preview|nightly|canary|edge)") | not
                  )
              ')

              [ -z "$names" ] && break

              tags+=($names)

              next=$(echo "$result" | jq -r '.next')
              [ "$next" = "null" ] && break
              page=$((page + 1))
            done

            # 确保包含 latest
            tags+=("latest")
            echo "${tags[@]}" | tr ' ' '\n' | sort -Vu
          }

          declare -A seen_images duplicate_names

          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue

            alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
            img=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | awk '{print $NF}')
            img="${img%%@*}"

            base_img="${img%%:*}"
            tag="${img##*:}"
            [ "$base_img" = "$tag" ] && tag="latest"

            org_repo="$base_img"
            if [[ "$org_repo" != *"/"* ]]; then
              org_repo="library/$org_repo"
            fi

            # 标记重复名
            img_name=$(basename "$base_img")
            ns=$(echo "$base_img" | awk -F'/' '{print (NF>1 ? $(NF-1) : "")}')
            [ -n "${seen_images[$img_name]:-}" ] && duplicate_names["$img_name"]=true
            seen_images["$img_name"]="${ns}_"

            tags=$(get_all_valid_tags "$org_repo")

            for t in $tags; do
              # 如果用户显式指定了 tag，只同步那一个
              [[ "$line" =~ : && "$t" != "$tag" && "$t" != "latest" ]] && continue

              origin="${base_img}:${t}"
              final_name="${alias:-$img_name}:${t}"

              ns_prefix=""
              [ -n "${duplicate_names[$img_name]:-}" ] && [ -n "$ns" ] && ns_prefix="${ns}_"

              aliyun_image="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${ns_prefix}${final_name}"

              echo "🐳 Pulling $origin"
              docker pull "$origin" || continue

              echo "🔗 Tagging $origin -> $aliyun_image"
              docker tag "$origin" "$aliyun_image"

              echo "📤 Pushing $aliyun_image"
              docker push "$aliyun_image"

              docker rmi "$origin" "$aliyun_image" || true
              echo "✅ Done: $origin -> $aliyun_image"
              echo "----------------------------------------"
            done
          done < images.txt
