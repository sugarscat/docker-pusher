name: Docker Pusher 🐳✨

on:
  workflow_dispatch:
  schedule:
    - cron: '00 00 * * *'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull & Push 🚀
    runs-on: ubuntu-latest

    steps:
    - name: Check Disk Before Cleanup 📦
      run: |
        echo "🧹 Before cleaning up..."
        df -hT

    - name: Maximize Disk Space 📈
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: true
        remove-haskell: true
        build-mount-path: '/var/lib/docker/'

    - name: Restart Docker 🔄
      run: sudo service docker restart

    - name: Check Disk After Cleanup 📦✅
      run: |
        echo "✨ Cleanup done!"
        df -hT

    - name: Install jq for JSON parsing 🔧
      run: sudo apt-get update && sudo apt-get install -y jq curl

    - name: Checkout Code 🛒
      uses: actions/checkout@v4

    - name: Setup Docker Buildx 🔧
      uses: docker/setup-buildx-action@v3

    - name: Pull, Tag, Push Images 📦➡️🛳️
      run: |
        set -euo pipefail

        ALIYUN_REGISTRY="${{ env.ALIYUN_REGISTRY }}"
        ALIYUN_NAME_SPACE="${{ env.ALIYUN_NAME_SPACE }}"
        ALIYUN_REGISTRY_USER="${{ env.ALIYUN_REGISTRY_USER }}"
        ALIYUN_REGISTRY_PASSWORD="${{ env.ALIYUN_REGISTRY_PASSWORD }}"

        echo "🔑 Login to Aliyun Registry..."
        docker login -u "$ALIYUN_REGISTRY_USER" -p "$ALIYUN_REGISTRY_PASSWORD" "$ALIYUN_REGISTRY"

        # 函数：调用 Docker Hub API 获取最新版本tag
        get_latest_tag() {
          local repo=$1
          latest_tag=$(curl -s "https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100" | \
            jq -r '.results[].name' | grep -E '^[0-9]+(\.[0-9]+)*$' | sort -V | tail -1)

          if [ -z "$latest_tag" ]; then
            latest_tag="latest"
          fi
          echo "$latest_tag"
        }

        # 读取 images.txt，分析是否有同名镜像，避免命名冲突
        declare -A duplicate_images temp_map
        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue
          alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
          image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | xargs | awk '{print $NF}')
          image="${image%%@*}"
          image_name=$(basename "$image" | cut -d':' -f1)
          name_space=$(echo "$image" | awk -F'/' '{print (NF==3 ? $2 : (NF==2 ? $1 : ""))}')
          if [ -n "${temp_map[$image_name]:-}" ] && [ "${temp_map[$image_name]}" != "${name_space}_" ]; then
            duplicate_images["$image_name"]=true
          fi
          temp_map["$image_name"]="${name_space}_"
        done < images.txt

        echo "🚀 Start processing images..."

        while IFS= read -r line || [ -n "$line" ]; do
          [[ -z "$line" || "$line" =~ ^# ]] && continue

          alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
          platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
          platform_prefix=${platform//\//_}_

          [ -z "$platform" ] && platform_prefix=""

          image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | xargs | awk '{print $NF}')
          image="${image%%@*}"

          image_name_tag=$(basename "$image")
          image_name=$(echo "$image_name_tag" | cut -d':' -f1)
          image_tag=$(echo "$image_name_tag" | cut -d':' -f2)
          [ -z "$image_tag" ] && image_tag="latest"

          name_space=$(echo "$image" | awk -F'/' '{print (NF==3 ? $2 : (NF==2 ? $1 : ""))}')
          name_space_prefix=""
          if [ -n "${duplicate_images[$image_name]:-}" ] && [ -n "$name_space" ]; then
            name_space_prefix="${name_space}_"
          fi

          repo=$(echo "$image" | awk -F':' '{print $1}')

          # 处理需要拉取的标签列表
          tags_to_pull=()

          if [ "$image_tag" == "latest" ]; then
            tags_to_pull+=("latest")

            if [[ "$repo" == */* ]]; then
              latest_tag=$(get_latest_tag "$repo")
              if [ "$latest_tag" != "latest" ] && [ "$latest_tag" != "" ]; then
                tags_to_pull+=("$latest_tag")
                echo "🎯 For $repo, also pull latest version tag: $latest_tag"
              fi
            fi
          else
            tags_to_pull+=("$image_tag")
          fi

          for tag in "${tags_to_pull[@]}"; do
            image_name_tag="${image_name}:${tag}"

            # 如果是 alias 且不是 latest 标签，改用 alias 标签命名
            if [ -n "$alias" ] && [ "$tag" != "latest" ]; then
              image_name_tag="${alias}:${tag}"
            fi

            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"

            echo "🐳 Pulling $repo:$tag ..."
            docker pull "$repo:$tag"

            echo "🔗 Tagging as $new_image ..."
            docker tag "$repo:$tag" "$new_image"

            echo "📤 Pushing $new_image ..."
            docker push "$new_image"

            echo "🧹 Cleaning up local images..."
            docker rmi "$repo:$tag" "$new_image"

            echo "🛢️ Disk usage after cleanup:"
            df -hT
            echo "=============================================================================="
          done

        done < images.txt
