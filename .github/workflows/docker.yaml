name: Docker Pusher üê≥‚ú®

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # ÊØèÂ§© 0 ÁÇπÊâßË°å

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Disk Space üì¶
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: true
          remove-haskell: true
          build-mount-path: "/var/lib/docker/"

      - name: Restart Docker üîÑ
        run: sudo service docker restart

      - name: Checkout Code üõí
        uses: actions/checkout@v4

      - name: Install Tools üîß
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq moreutils parallel

      - name: Login to Aliyun Docker üê≥
        run: docker login -u "${ALIYUN_REGISTRY_USER}" -p "${ALIYUN_REGISTRY_PASSWORD}" "${ALIYUN_REGISTRY}"

      - name: Sync Docker Images üöÄ (Parallel 4 Threads)
        run: |
          set -euo pipefail

          export ALIYUN_REGISTRY="${ALIYUN_REGISTRY}"
          export ALIYUN_NAME_SPACE="${ALIYUN_NAME_SPACE}"

          get_recent_tags() {
            local repo="$1"
            local page=1
            local tags=()
            local cutoff_ts=$(date -d '1 day ago' +%s)

            while :; do
              url="https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100&page=$page"
              result=$(curl -fsSL "$url" || break)

              [[ -z "$result" || "$result" == "null" ]] && break

              tag_lines=$(echo "$result" | jq -r '.results[] | [.name, .last_updated] | @tsv')
              has_recent=false

              while IFS=$'\t' read -r tag updated; do
                ts=$(date -d "$updated" +%s 2>/dev/null || echo 0)
                if (( ts >= cutoff_ts )); then
                  if [[ "$tag" == "latest" || "$tag" =~ ^v?[0-9]+\.[0-9]+(\.[0-9]+)?(-[a-zA-Z0-9]+)?$ ]]; then
                    if [[ "$tag" =~ (alpha|beta|rc|dev|test|nightly|canary|edge|amazon) && "$tag" != "latest" ]]; then
                      continue
                    fi
                    tags+=("$tag")
                    has_recent=true
                  fi
                fi
              done <<< "$tag_lines"

              [[ "$has_recent" == false ]] && break
              next=$(echo "$result" | jq -r '.next')
              [[ "$next" == "null" || -z "$next" ]] && break
              ((page++))
            done
            printf "%s\n" "${tags[@]}" | sort -u
          }

          sync_one() {
            local line="$1"

            alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
            image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | awk '{print $NF}')
            base="${image%%:*}"
            tag="${image##*:}"
            [[ "$base" == "$tag" ]] && tag=""

            repo="${base}"
            [[ "$repo" != */* ]] && repo="library/$repo"
            name=$(basename "$base")

            if [[ -n "$alias" ]]; then
              target_name="$alias"
            else
              target_name="$name"
            fi

            echo "üì¶ Resolving tags for $repo..."
            if [[ -n "$tag" ]]; then
              tags=("$tag")
            else
              tags=($(get_recent_tags "$repo"))
            fi

            for t in "${tags[@]}"; do
              src="${base}:${t}"
              full_target="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${target_name}:${t}"

              echo "üê≥ Pulling $src..."
              if ! docker pull "$src"; then
                echo "‚ùå Failed to pull $src, skipping."
                continue
              fi

              src_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "$src" 2>/dev/null | cut -d@ -f2)
              target_digest=$(docker manifest inspect "$full_target" 2>/dev/null | jq -r '.manifests[0].digest // .config.digest' 2>/dev/null || true)

              if [[ -n "$src_digest" && "$src_digest" == "$target_digest" ]]; then
                echo "‚úÖ $full_target is up-to-date, skipping."
                docker rmi "$src" || true
                continue
              fi

              echo "üîó Tagging: $src -> $full_target"
              docker tag "$src" "$full_target"

              echo "üì§ Pushing $full_target..."
              if ! timeout --foreground 300 docker push "$full_target"; then
                echo "‚ö†Ô∏è Push failed or timed out for $full_target"
                continue
              fi

              docker rmi "$src" "$full_target" || true
              echo "‚úÖ Done: $src -> $full_target"
              echo "---------------------------------------------"
            done
          }

          export -f sync_one get_recent_tags

          echo "üîç Reading images.txt and starting 4 parallel syncs..."
          grep -vE '^\s*#|^\s*$' images.txt | parallel -j 4 --line-buffer sync_one {}
