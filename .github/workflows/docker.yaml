name: Docker Pusher 🐳✨

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # 每天 0 点执行

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Disk Space 📦
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: true
          remove-haskell: true
          build-mount-path: '/var/lib/docker/'

      - name: Restart Docker 🔄
        run: sudo service docker restart

      - name: Checkout Code 🛒
        uses: actions/checkout@v4

      - name: Install Tools 🔧
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Login to Aliyun Docker 🐳
        run: docker login -u "${ALIYUN_REGISTRY_USER}" -p "${ALIYUN_REGISTRY_PASSWORD}" "${ALIYUN_REGISTRY}"

      - name: Sync Docker Images 🚀
        run: |
          set -euo pipefail

          DAYS_LIMIT=1
          CUTOFF_DATE=$(date -d "$DAYS_LIMIT days ago" +%s)

          get_recent_tags() {
            repo="$1"
            page=1
            tags=()
            echo "🔍 Checking tags for $repo..."

            while :; do
              result=$(curl -fsSL "https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100&page=$page")
              dates=$(echo "$result" | jq -r '.results[] | [.name, .last_updated] | @tsv')

              [ -z "$dates" ] && break

              while IFS=$'\t' read -r tag updated; do
                ts=$(date -d "$updated" +%s || echo 0)
                if (( ts >= CUTOFF_DATE )); then
                  if [[ ! "$tag" =~ (alpha|beta|rc|dev|test|nightly|canary|edge) ]]; then
                    tags+=("$tag")
                  fi
                fi
              done <<< "$dates"

              [[ "$(echo "$result" | jq -r '.next')" == "null" ]] && break
              ((page++))
            done

            tags+=("latest")
            printf "%s\n" "${tags[@]}" | sort -u
          }

          declare -A seen_images duplicate_names

          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" =~ ^# ]] && continue

            alias=$(echo "$line" | sed -n 's/.*--alias[ =]\([^ ]*\).*/\1/p')
            image=$(echo "$line" | sed -E 's/--alias[ =][^ ]+//g' | awk '{print $NF}')
            base="${image%%:*}"
            tag="${image##*:}"
            [[ "$base" == "$tag" ]] && tag=""

            repo="${base}"
            [[ "$repo" != */* ]] && repo="library/$repo"

            name=$(basename "$base")
            ns=$(echo "$base" | awk -F'/' '{print (NF>1 ? $(NF-1) : "")}')
            [[ -n "${seen_images[$name]:-}" ]] && duplicate_names["$name"]=true
            seen_images["$name"]="${ns}_"

            if [[ -n "$tag" ]]; then
              tags=("$tag")
            else
              tags=($(get_recent_tags "$repo"))
            fi

            for t in "${tags[@]}"; do
              src="${base}:${t}"
              newname="${alias:-$name}:${t}"

              prefix=""
              [[ -n "${duplicate_names[$name]:-}" && -n "$ns" ]] && prefix="${ns}_"

              target="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${prefix}${newname}"

              echo "🐳 Pulling $src"
              docker pull "$src" || continue

              echo "🔗 Tag: $src -> $target"
              docker tag "$src" "$target"

              echo "📤 Pushing to $target"
              timeout --foreground 300 docker push "$target" || { echo "⚠️ Push $target 超时或失败，跳过"; continue; }

              echo "🧹 Cleaning up local images..."
              docker rmi "$src" "$target" || true
              echo "✅ Done $src"
              echo "---------------------------------------------"
            done
          done < images.txt
